@inject MarkdownPages Markdown

<div class="flex md:py-XL xl:gap-XXXL justify-center items-center relative 3xl:h-[600px] xl:h-[520px] md:h-[350px] lg:h-[550px] sm:h-[612px] h-[600px] overflow-hidden">
    @foreach (var item in Markdown.GetVisiblePages("blog").Where(x => x.IsFeatured).OrderByDescending(x => x.Date).Take(3))
    {
        <div class="absolute flex items-center w-full ease-in-out slide duration-2000 rounded-L">
            <div class="inner-slide flex md:flex-row flex-col xl:gap-XXXL gap-XL bg-[#FFFFFF] xl:mx-[56px] md:mx-M mx-[8px] rounded-L blog-card">
                <div class="sm:mx-0">
                    <a href="/@item.Slug">
                        <img src="https://transformation-v880sgs.coolify.avd.unilake.com/image/@item.Image?width=860&height=525" alt="Cover Image for" class="rounded-L object-cover 3xl:aspect-[859/525] md:aspect-[412/368] aspect-[327/210]">
                    </a>
                </div>
                <div class="m-auto md:pr-XL max-md:pb-L xl:max-w-[440px] md:max-w-[324px]">
                    <div class="flex flex-col xl:gap-L md:gap-M gap-L max-md:px-M h-fit">
                        <a href="/@item.Slug">
                            <h1 class="text-H3 leading-[40px] text-headLines blog-heading">@item.Title</h1></a>
                        <p class="text-Regular text-bodyText md:line-clamp-none line-clamp-2">@item.Summary</p>
                        <a class="" href="/@item.Slug">
                            @await Html.PartialAsync("Logos/ReadArticleLogo")
                        </a>
                        <div class="flex gap-M h-[48px] max-w-[272px]">
                            <img src="@item.AuthorImage" class="h-[48px] w-[48px] rounded-full">
                            <div class="flex flex-col justify-between lg:min-w-[208px] md:min-w-[200px] min-w-[180px]">
                                <span class="text-Bold text-headLines">@item.Author</span>
                                <div class="flex items-end justify-between">
                                    <span class="text-Small text-bodyText">@($"{item.Date:dd MMMM yyyy}")</span>
                                    <div class="flex items-center h-full">
                                        <svg width="4" height="5" viewBox="0 0 4 5" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M0.22168 3.06641V2.70605C0.22168 2.20215 0.379883 1.78613 0.696289 1.45801C1.01855 1.12988 1.45508 0.96582 2.00586 0.96582C2.5625 0.96582 3.00195 1.12988 3.32422 1.45801C3.64648 1.78613 3.80762 2.20215 3.80762 2.70605V3.06641C3.80762 3.56445 3.64648 3.97754 3.32422 4.30566C3.00781 4.62793 2.57129 4.78906 2.01465 4.78906C1.46387 4.78906 1.02734 4.62793 0.705078 4.30566C0.382812 3.97754 0.22168 3.56445 0.22168 3.06641Z" fill="#252532"/>
                                        </svg>
                                    </div>
                                    <span class="text-Small text-bodyText">@(Math.Max(item.WordCount / 238 ?? 0, 1)) min read</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<div class="justify-center hidden lg:flex gap-L">
    <button type="button" class="w-[24px] h-[24px] rounded-full" aria-current="true" aria-label="Slide 1" data-carousel-slide-to="0"></button>
    <button type="button" class="w-[24px] h-[24px] rounded-full" aria-current="false" aria-label="Slide 2" data-carousel-slide-to="1"></button>
    <button type="button" class="w-[24px] h-[24px] rounded-full" aria-current="false" aria-label="Slide 3" data-carousel-slide-to="2"></button>
</div>

<script>
    const slides = document.querySelectorAll(".slide");
    const innerSlides = document.querySelectorAll(".inner-slide");
    const indicators = document.querySelectorAll("[data-carousel-slide-to]");
    var counter = 0;
    var sliderInterval;
    var isIncrementing = false;

    slides.forEach((slide, index) => {
        slide.style.left = `${index * 100}%`;
    });

    const slideImage = () => {
        slides.forEach((slide) => {
            slide.style.transform = `translateX(-${counter * 100}%)`;
        });
        updateIndicators();
    };

    const startSlider = () => {
        sliderInterval = setInterval(() => {
            if (counter === 0) {
                isIncrementing = true;
            }
            if (counter === 2) {
                isIncrementing = false;
            }
            if (isIncrementing === true) {
                counter++;
            }
            if (isIncrementing === false) {
                counter--;
            }
            slideImage();
        }, 6000)
    };

    const pauseSlider = () => {
        clearInterval(sliderInterval);
    };

    const resumeSlider = () => {
        startSlider();
    };

    const updateIndicators = () => {
        indicators.forEach((indicator, index) => {
            indicator.ariaCurrent = index === counter ? "true" : "false";
        });
    };

    indicators.forEach((indicator) => {
        indicator.addEventListener("click", (event) => {
            pauseSlider();
            counter = parseInt(event.target.getAttribute("data-carousel-slide-to"));
            slideImage();
            resumeSlider();
        });
    });

    innerSlides.forEach((slide) => {
        slide.addEventListener("mouseenter", pauseSlider);
        slide.addEventListener("mouseleave", resumeSlider);
    });

    window.onload = startSlider;

</script>